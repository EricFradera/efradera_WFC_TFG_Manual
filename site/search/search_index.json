{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to WFC generator WFC generator is a tool made by Eric Fradera that aims to make wave function collapse generation easy for everybody,no matter the speciality of the user.","title":"Home"},{"location":"index.html#welcome-to-wfc-generator","text":"WFC generator is a tool made by Eric Fradera that aims to make wave function collapse generation easy for everybody,no matter the speciality of the user.","title":"Welcome to WFC generator"},{"location":"Tile/index.html","text":"Tiles Tiles are the basis of all generation. Tiles in this context shouln't be taken as the common sprites used in common 2d games. Tiles work more as patterns to a certain visual element. Tiles can also be 2d sprite tiles, but also 3d models, hexagons... By having a good understanding of the concept, we can get the most out of the generator. In the WFCTile we provide a few parameters for the user: TileName: name of the tile TileId: used for identification Frequency: how common is a tile. The frequency is done by the sum of all frequencies. In the editor is used as a slider between 1 to 100, but we give full freedom to use its own values. AdjacencyCodes: easy to visualize codes from nodeHelpers TileVisuals: list of gameObjects that will be spawned when the tile is selected. Tile texture: same thing as tileVisuals but with textures. PreviewTexture: is used to preview in the inspector, by default it takes the first item on the texture list or the preview from the firstgamobject. AssetType: the user can decide which type of asset will be spawned, either gameobjects or textures. Rotations: rotations allow for a tile to be rotated clockwise. Not all topologies have support for every feature take a look at Features Make sure to check the tick use rotations in the configuration file","title":"WFCTile"},{"location":"Tile/index.html#tiles","text":"Tiles are the basis of all generation. Tiles in this context shouln't be taken as the common sprites used in common 2d games. Tiles work more as patterns to a certain visual element. Tiles can also be 2d sprite tiles, but also 3d models, hexagons... By having a good understanding of the concept, we can get the most out of the generator. In the WFCTile we provide a few parameters for the user: TileName: name of the tile TileId: used for identification Frequency: how common is a tile. The frequency is done by the sum of all frequencies. In the editor is used as a slider between 1 to 100, but we give full freedom to use its own values. AdjacencyCodes: easy to visualize codes from nodeHelpers TileVisuals: list of gameObjects that will be spawned when the tile is selected. Tile texture: same thing as tileVisuals but with textures. PreviewTexture: is used to preview in the inspector, by default it takes the first item on the texture list or the preview from the firstgamobject. AssetType: the user can decide which type of asset will be spawned, either gameobjects or textures. Rotations: rotations allow for a tile to be rotated clockwise. Not all topologies have support for every feature take a look at Features Make sure to check the tick use rotations in the configuration file","title":"Tiles"},{"location":"examples/index.html","text":"Examples Super Mario This demo tries to showcase both the one-dimensional topology and the configuration through manual relationships. One dimensional topology are very simple so manual configurations feels very natural and visual. In the case of this Mario level, we can create a visually consistent level that is also controlled in the game design department. The designer can create sections by linking them with a relation to give the user with controlled wise difficulty sections. In a sectional new mechanic can be introduced and provide multiple versions for increased variety. Wang Tiles A few examples have been followed to show that this tool cover all tile possibilities under the rules proposed by Hao Wang. Corner tiles 2 corner tiles are very useful to texturize terrains in a procedural way. In the first pic we can see a very cartoon and visual configuration, by changing this very defined version by texture with more noise and more diffuse, we are able to create very convincing textures with just 6 samples. Blob tiles Blob tiles are great to use for dungeon creation. The dungeons can easily be transformed into 3d environments. The use of frequency is an invaluable tool in with these types of tiles, by increasing the amount of floor level we can obtain bigger rooms while increasing corridor tile will make corridors be longer and make rooms far from each other. Oksar stalberg demo Oskar stalberg has been a referent in the wave function community. This demo is a great example of landscapes and structures that can be created. Both terrain and decoration such as buildings can be done easily. Carcassone Carcassone is a tabletop game that uses Wang tiles and illustrates the possibility on city generation when used properly as shown in the figure XX- Rotation demo This demo showcases the use of full 2d rotations and how with just a simple sample as a texture, and a few rotations a lot of patterns can be created as the example below. Rotations are invaluable to make configurations a fast and easy to understand. Pipes 3d Pipes 3d showcases the capability to create complex system using wfc. Pipes 3d also showcases rotations made on 3d. Pipes are symmetrical 3d tiles which makes them perfect for a rotation demo. The input of the demo only requires 4 3d models to work completely. Then the user can add the rotations at will. Playing with both the frequency and the rotation of every tile creates surprising and very interesting results. Camping The camping demo showcases a few features. First it uses 3d topology to create terrains with different heights no longer constrain to a single plane. Then, it uses the check randomize between variables which allows to spawn decoration elements in available spaces randomly. In this demo it spawns from trees, to grass to tents to fill the terrain. With the frequency variable the number of objects can be tuned and fill environments in a more natural way.","title":"Examples"},{"location":"examples/index.html#examples","text":"","title":"Examples"},{"location":"examples/index.html#super-mario","text":"This demo tries to showcase both the one-dimensional topology and the configuration through manual relationships. One dimensional topology are very simple so manual configurations feels very natural and visual. In the case of this Mario level, we can create a visually consistent level that is also controlled in the game design department. The designer can create sections by linking them with a relation to give the user with controlled wise difficulty sections. In a sectional new mechanic can be introduced and provide multiple versions for increased variety.","title":"Super Mario"},{"location":"examples/index.html#wang-tiles","text":"A few examples have been followed to show that this tool cover all tile possibilities under the rules proposed by Hao Wang.","title":"Wang Tiles"},{"location":"examples/index.html#corner-tiles","text":"2 corner tiles are very useful to texturize terrains in a procedural way. In the first pic we can see a very cartoon and visual configuration, by changing this very defined version by texture with more noise and more diffuse, we are able to create very convincing textures with just 6 samples.","title":"Corner tiles"},{"location":"examples/index.html#blob-tiles","text":"Blob tiles are great to use for dungeon creation. The dungeons can easily be transformed into 3d environments. The use of frequency is an invaluable tool in with these types of tiles, by increasing the amount of floor level we can obtain bigger rooms while increasing corridor tile will make corridors be longer and make rooms far from each other.","title":"Blob tiles"},{"location":"examples/index.html#oksar-stalberg-demo","text":"Oskar stalberg has been a referent in the wave function community. This demo is a great example of landscapes and structures that can be created. Both terrain and decoration such as buildings can be done easily.","title":"Oksar stalberg demo"},{"location":"examples/index.html#carcassone","text":"Carcassone is a tabletop game that uses Wang tiles and illustrates the possibility on city generation when used properly as shown in the figure XX-","title":"Carcassone"},{"location":"examples/index.html#rotation-demo","text":"This demo showcases the use of full 2d rotations and how with just a simple sample as a texture, and a few rotations a lot of patterns can be created as the example below. Rotations are invaluable to make configurations a fast and easy to understand.","title":"Rotation demo"},{"location":"examples/index.html#pipes-3d","text":"Pipes 3d showcases the capability to create complex system using wfc. Pipes 3d also showcases rotations made on 3d. Pipes are symmetrical 3d tiles which makes them perfect for a rotation demo. The input of the demo only requires 4 3d models to work completely. Then the user can add the rotations at will. Playing with both the frequency and the rotation of every tile creates surprising and very interesting results.","title":"Pipes 3d"},{"location":"examples/index.html#camping","text":"The camping demo showcases a few features. First it uses 3d topology to create terrains with different heights no longer constrain to a single plane. Then, it uses the check randomize between variables which allows to spawn decoration elements in available spaces randomly. In this demo it spawns from trees, to grass to tents to fill the terrain. With the frequency variable the number of objects can be tuned and fill environments in a more natural way.","title":"Camping"},{"location":"features/index.html","text":"Features Wave function collapse is an algorithm of procedural generation that rely on adjacency constrains to create visually consistent compositions. The algorithm was initially used as a texture synthesis algorithm. To know more about the algorithm we suggest either reading the TFG document or watch the following video: Wave function collapse by Martin Donald Models The tool provides four models or topologies for procedural generation: One dimensional generation: ideal for sides scroller games such as super Mario bros or downwell. Two dimensional generation: all kinds of tile based 2d games. This includes the use of sprites and3d models. Three dimensional generation: allows to create games with with depth and height. Hexagonal games: great for games that rely on hexagonal tiles. While all models allow for generation, no all of the have the same feature set. The following table shows the feature set of each topology: Topology Manual configuration Helpers Gizmo representation Rotations 1D \u2714 \u2714 \u2714 n/a 2D \u2714 \u2714 \u2714 \u2714 3D \u2714 \u2714 \u2714 **\u2714 HEX \u2714 \u2714 *\u2714 x *Although hexagonal has a gizmo, it doesn't provide a precise representation. **3D rotations are only available for symmetrical configurations Node helpers Node helpers allow to give a code to a certain type of shape to a side of a tile. This allows for easy to use and less work intensive configurations. The use of rotations also prove fundamental for rotate certain tiles Node editor All the configurations are done through the node editor. In this enviroment all tools an features are provided to create the relations in a visual friendly enviroment. All the topologies share the same editor, so the learning curve is very easy. Rotations Rotations allow for easier configurations by allowing to just configurate a single tile and then provide which rotations also take part in the generation to know more visit WFCTile Tile exported The tile exporter allows to serialise a whole configuration into a json file. Unified generator Don't worry about any setUp, just create a root gameObject and add the WFCGenerator, everything will be handled with any more generation. Focus on provide the proper configurations such us frequency, adjacencies etc. Multiple sets Add multiple sets of textures under the same configuration. By understanding a tile as a pattern we can abstract an reuse the same configuration to use it with multiple sets of textures We can add multiple textures or gameobjects and indicate in the generator in the tileSetIndex which is the tileSet index based on the list index.","title":"Features"},{"location":"features/index.html#features","text":"Wave function collapse is an algorithm of procedural generation that rely on adjacency constrains to create visually consistent compositions. The algorithm was initially used as a texture synthesis algorithm. To know more about the algorithm we suggest either reading the TFG document or watch the following video: Wave function collapse by Martin Donald","title":"Features"},{"location":"features/index.html#models","text":"The tool provides four models or topologies for procedural generation: One dimensional generation: ideal for sides scroller games such as super Mario bros or downwell. Two dimensional generation: all kinds of tile based 2d games. This includes the use of sprites and3d models. Three dimensional generation: allows to create games with with depth and height. Hexagonal games: great for games that rely on hexagonal tiles. While all models allow for generation, no all of the have the same feature set. The following table shows the feature set of each topology: Topology Manual configuration Helpers Gizmo representation Rotations 1D \u2714 \u2714 \u2714 n/a 2D \u2714 \u2714 \u2714 \u2714 3D \u2714 \u2714 \u2714 **\u2714 HEX \u2714 \u2714 *\u2714 x *Although hexagonal has a gizmo, it doesn't provide a precise representation. **3D rotations are only available for symmetrical configurations","title":"Models"},{"location":"features/index.html#node-helpers","text":"Node helpers allow to give a code to a certain type of shape to a side of a tile. This allows for easy to use and less work intensive configurations. The use of rotations also prove fundamental for rotate certain tiles","title":"Node helpers"},{"location":"features/index.html#node-editor","text":"All the configurations are done through the node editor. In this enviroment all tools an features are provided to create the relations in a visual friendly enviroment. All the topologies share the same editor, so the learning curve is very easy.","title":"Node editor"},{"location":"features/index.html#rotations","text":"Rotations allow for easier configurations by allowing to just configurate a single tile and then provide which rotations also take part in the generation to know more visit WFCTile","title":"Rotations"},{"location":"features/index.html#tile-exported","text":"The tile exporter allows to serialise a whole configuration into a json file.","title":"Tile exported"},{"location":"features/index.html#unified-generator","text":"Don't worry about any setUp, just create a root gameObject and add the WFCGenerator, everything will be handled with any more generation. Focus on provide the proper configurations such us frequency, adjacencies etc.","title":"Unified  generator"},{"location":"features/index.html#multiple-sets","text":"Add multiple sets of textures under the same configuration. By understanding a tile as a pattern we can abstract an reuse the same configuration to use it with multiple sets of textures We can add multiple textures or gameobjects and indicate in the generator in the tileSetIndex which is the tileSet index based on the list index.","title":"Multiple sets"},{"location":"nodeHelper/index.html","text":"NodeHelper NodeHelpers are used to configure sides of tile. The parameters are the following: UID: for identification Socket name: useful to preview at a glance which type of helper is. SocketCodes : used to identify a side. In the how they work section is explained how codes works to create adjacencies but the user can add as many identifiers as they want. The only rule is that it has to be consisten with all the other nodes that want to be paired. If a side is BBB and the next is also BBB it needs to use the same amount of codes spelled the same way (case sensitive). How they work Node helpers are used to defining adjacency codes without explicitly defining each adjacency. The process of defining every adjacency is a very time-consuming process prone to error. NodeHelpers try to make this process less painful. As shown in the pic, a node nodeHelper defines the pattern of a side of the tile. The are defined through a list of patterns. Patterns are depictions of the side of a tile, it can be represented by a colour, code or a definition of the side such us path or stairs in the example. The side of the node can be split as in many sections as the user wants and make use of a single code. In the case of 2d nodes, it supports symmetrical and asymmetrical rotations but to make asymmetrical rotations is fundamental to make use of proper tagging of a side. We can see how the notation should be done. Starting from the side on top and following a clockwise rotation. So, the first code would be BBB, the second BPB and so on. When proper tagging is done, all types of rotations can be used no matter if the tile has a symmetrical structure or not.","title":"NodeHelper"},{"location":"nodeHelper/index.html#nodehelper","text":"NodeHelpers are used to configure sides of tile. The parameters are the following: UID: for identification Socket name: useful to preview at a glance which type of helper is. SocketCodes : used to identify a side. In the how they work section is explained how codes works to create adjacencies but the user can add as many identifiers as they want. The only rule is that it has to be consisten with all the other nodes that want to be paired. If a side is BBB and the next is also BBB it needs to use the same amount of codes spelled the same way (case sensitive).","title":"NodeHelper"},{"location":"nodeHelper/index.html#how-they-work","text":"Node helpers are used to defining adjacency codes without explicitly defining each adjacency. The process of defining every adjacency is a very time-consuming process prone to error. NodeHelpers try to make this process less painful. As shown in the pic, a node nodeHelper defines the pattern of a side of the tile. The are defined through a list of patterns. Patterns are depictions of the side of a tile, it can be represented by a colour, code or a definition of the side such us path or stairs in the example. The side of the node can be split as in many sections as the user wants and make use of a single code. In the case of 2d nodes, it supports symmetrical and asymmetrical rotations but to make asymmetrical rotations is fundamental to make use of proper tagging of a side. We can see how the notation should be done. Starting from the side on top and following a clockwise rotation. So, the first code would be BBB, the second BPB and so on. When proper tagging is done, all types of rotations can be used no matter if the tile has a symmetrical structure or not.","title":"How they work"},{"location":"setup/index.html","text":"SetUp The setUp for the project is very easy. Just follow the next steps: You got the TFG folder Download the unity package from the folder. Open the project where you want to import the tool. Drag it to the asset explorer or double click to import. You don't have the folder Download the repository from the following link: GitHub repository On the folder Unity Package you can find the asset, just follow the previous section. Quickstart guide Once everything is imported you are halfway there! The tool is thought to be as easy to use as possible. Follow the next steps to create your own configuration: Create a WFCConfiguration asset from the file explorer: You can decide whichever type of topology you want to use, all of them follow the same workflow. Once created, by double clicking the asset we can access the node editor. By right clicking in the node editor we are given 2 options: Node tile: tile assets that need to be configured. For more information go to: Node helpers: node that help add code identifiers to the tiles. go to: Now its time to configure each side of a node tile manually (by connecting an output tile to the input of another tile) or by a node helper (connecting an output tile to a node helper). As we can see in the the picture below This process is the most time consuming part of the configuration. The main difficulty is give the proper codes for an optima configuration. Once the whole configuration has been finished we are ready to start generating. Create a empty game object and add the component: WFCGenerator Once it's added you can add the file on the WFCConfigFile field and start the generator.","title":"SetUp"},{"location":"setup/index.html#setup","text":"The setUp for the project is very easy. Just follow the next steps:","title":"SetUp"},{"location":"setup/index.html#you-got-the-tfg-folder","text":"Download the unity package from the folder. Open the project where you want to import the tool. Drag it to the asset explorer or double click to import.","title":"You got the TFG folder"},{"location":"setup/index.html#you-dont-have-the-folder","text":"Download the repository from the following link: GitHub repository On the folder Unity Package you can find the asset, just follow the previous section.","title":"You don't have the folder"},{"location":"setup/index.html#quickstart-guide","text":"Once everything is imported you are halfway there! The tool is thought to be as easy to use as possible. Follow the next steps to create your own configuration: Create a WFCConfiguration asset from the file explorer: You can decide whichever type of topology you want to use, all of them follow the same workflow. Once created, by double clicking the asset we can access the node editor. By right clicking in the node editor we are given 2 options: Node tile: tile assets that need to be configured. For more information go to: Node helpers: node that help add code identifiers to the tiles. go to: Now its time to configure each side of a node tile manually (by connecting an output tile to the input of another tile) or by a node helper (connecting an output tile to a node helper). As we can see in the the picture below This process is the most time consuming part of the configuration. The main difficulty is give the proper codes for an optima configuration. Once the whole configuration has been finished we are ready to start generating. Create a empty game object and add the component: WFCGenerator Once it's added you can add the file on the WFCConfigFile field and start the generator.","title":"Quickstart guide"},{"location":"wfcgenerator/index.html","text":"WFCGenerator The wfc generator handles all the generation made by the tool. M_gridSize : indicates how big a tile will be. Grid extent : indicates how big the grid will be Backtracking: by default the generator uses a greedy approach. When this greedy fails its starts again until it finds a solution. When configurations become very complex is better to use backtracking to avoid greedy to fail too many times. Will increase processing times in bigger and complex generations. TileSetIndex: if the tiles have multiple assets you can indicate which index of the list you want them to use. LineColor: changes the colour of the lines of the gizmos. WFCTiles: shows a preview of all the tiles in the configuration. Some easy to acces parametes has been made available for comodity.","title":"WFCGenerator"},{"location":"wfcgenerator/index.html#wfcgenerator","text":"The wfc generator handles all the generation made by the tool. M_gridSize : indicates how big a tile will be. Grid extent : indicates how big the grid will be Backtracking: by default the generator uses a greedy approach. When this greedy fails its starts again until it finds a solution. When configurations become very complex is better to use backtracking to avoid greedy to fail too many times. Will increase processing times in bigger and complex generations. TileSetIndex: if the tiles have multiple assets you can indicate which index of the list you want them to use. LineColor: changes the colour of the lines of the gizmos. WFCTiles: shows a preview of all the tiles in the configuration. Some easy to acces parametes has been made available for comodity.","title":"WFCGenerator"}]}